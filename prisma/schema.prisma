generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  incomes       Income[]
  expenses      Expense[]
  debts         Debt[]
  goals         Goal[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Income {
  id        String   @id @default(uuid())
  amount    Float
  source    String
  date      DateTime
  notes     String?
  createdAt DateTime @default(now())

  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Expense {
  id          String   @id @default(uuid())
  amount      Float
  category    String
  description String?
  date        DateTime
  createdAt   DateTime @default(now())

  userId      String
  user        User     @relation(fields: [userId], references: [id])
}

model Debt {
  id            String   @id @default(uuid())
  title         String
  totalAmount   Float
  remaining     Float
  creditor      String
  startDate     DateTime
  dueDate       DateTime?
  isPaid        Boolean  @default(false)
  createdAt     DateTime @default(now())

  payments      DebtPayment[]

  userId        String
  user          User     @relation(fields: [userId], references: [id])
}

model DebtPayment {
  id        String   @id @default(uuid())
  amount    Float
  date      DateTime
  notes     String?

  debtId    String
  debt      Debt     @relation(fields: [debtId], references: [id])
}

model Goal {
  id          String   @id @default(uuid())
  title       String
  target      Float
  saved       Float     @default(0)
  deadline    DateTime?
  description String?

  isAchieved  Boolean   @default(false)
  createdAt   DateTime  @default(now())

  userId      String
  user        User      @relation(fields: [userId], references: [id])
}